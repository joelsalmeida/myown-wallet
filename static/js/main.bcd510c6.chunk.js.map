{"version":3,"sources":["serviceWorker.js","actions/index.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","pages/Login.jsx","components/ExpenseForm.jsx","components/ExpenseTable.jsx","components/Header.jsx","pages/Wallet.jsx","App.js","index.js"],"names":["Boolean","window","location","hostname","match","END_POINT","INITIAL_STATE","email","userReducer","state","action","type","currencies","expenses","editIsActive","indexAndExchangeToEdit","walletReducer","expense","filter","id","expenseId","map","targetId","exchangeRates","exchange","newExpense","rootReducer","combineReducers","user","wallet","store","createStore","composeWithDevTools","applyMiddleware","thunk","Login","props","checkEmailAndPassword","password","setState","isEmailValid","test","isPasswordValid","length","handleChange","target","name","value","submit","login","history","push","this","ifEmailOrPasswordInvalid","className","htmlFor","onChange","data-testid","disabled","onClick","React","Component","connect","dispatch","loginAction","ExpenseForm","addExpense","prevState","description","currency","method","tag","setCurrencies","edit","buttonValue","index","key","defaultProps","indexToEdit","fetch","then","response","json","data","Object","keys","error","console","addExpenseAction","getCurrencyAddExpense","editExpense","ExpenseTable","delExpense","enableEdit","roundNumber","Number","toFixed","expenseValue","ask","currencyName","exchangeValue","find","expenseWith","indexOf","getIndexOfExpense","removeExpense","enableExpenseEditing","Header","expenseTotal","reduce","acc","curr","Wallet","App","exact","path","component","ReactDOM","render","StrictMode","basename","process","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.bcd510c6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Coloque aqui suas actions\n\nexport const LOGIN = 'LOGIN';\nexport const loginAction = (email) => ({ type: LOGIN, email });\n\nexport const SET_CURRENCIES = 'SET_CURRENCIES';\nexport const setCurrenciesAction = (currencies) => ({ type: SET_CURRENCIES, currencies });\n\nconst END_POINT = 'https://economia.awesomeapi.com.br/json/all';\n\nexport const fetchCurrencies = () => (dispatch) => {\n  try {\n    fetch(END_POINT)\n      .then((response) => response.json())\n      .then((data) => dispatch(setCurrenciesAction(\n        Object.keys(data).filter((currency) => currency !== 'USDT'),\n      )));\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const ADD_EXPENSE = 'ADD_EXPENSE';\nexport const addExpenseAction = (expense) => ({ type: ADD_EXPENSE, expense });\n\nexport const getCurrencyAddExpense = (expense) => (dispatch) => {\n  try {\n    fetch(END_POINT)\n      .then((response) => response.json())\n      .then((data) => dispatch(addExpenseAction({ ...expense, exchangeRates: data })));\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const REMOVE_EXPENSE = 'REMOVE_EXPENSE';\nexport const removeExpense = (expenseId) => ({ type: REMOVE_EXPENSE, expenseId });\n\nexport const ENABLE_EXPENSE_EDITING = 'ENABLE_EXPENSE_EDITING';\nexport const enableExpenseEditing = (expenseId) => ({\n  type: ENABLE_EXPENSE_EDITING, expenseId });\n\nexport const EDIT_EXPENSE = 'EDIT_EXPENSE';\nexport const editExpense = (newExpense) => ({ type: EDIT_EXPENSE, newExpense });\n","// Esse reducer será responsável por tratar as informações da pessoa usuária\nimport { LOGIN } from '../actions';\n\nconst INITIAL_STATE = {\n  email: '',\n};\n\nfunction userReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case LOGIN:\n    return {\n      ...state,\n      email: action.email,\n    };\n  default:\n    return state;\n  }\n}\n\nexport default userReducer;\n","// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\n\nimport {\n  ADD_EXPENSE,\n  EDIT_EXPENSE,\n  ENABLE_EXPENSE_EDITING,\n  REMOVE_EXPENSE,\n  SET_CURRENCIES,\n} from '../actions';\n\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n  editIsActive: false,\n  indexAndExchangeToEdit: null,\n};\n\nfunction walletReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case SET_CURRENCIES:\n    return {\n      ...state,\n      currencies: action.currencies,\n    };\n  case ADD_EXPENSE:\n    return {\n      ...state,\n      expenses: [...state.expenses, action.expense],\n    };\n  case REMOVE_EXPENSE:\n    return {\n      ...state,\n      expenses: state.expenses.filter(\n        ((expense) => expense.id !== action.expenseId),\n      ),\n    };\n  case ENABLE_EXPENSE_EDITING:\n    return {\n      ...state,\n      editIsActive: true,\n      indexAndExchangeToEdit: action.expenseId,\n    };\n  case EDIT_EXPENSE:\n    return {\n      ...state,\n      expenses: state.expenses.map((expense) => {\n        const targetId = state.indexAndExchangeToEdit.id;\n        const exchangeRates = state.indexAndExchangeToEdit.exchange;\n        const newExpense = { ...action.newExpense, exchangeRates };\n\n        return (expense.id === targetId) ? newExpense : expense;\n      }),\n      editIsActive: false,\n    };\n  default:\n    return state;\n  }\n}\n\nexport default walletReducer;\n","// import user from './user';\n// import wallet from './wallet';\n\n// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\n\nimport { combineReducers } from 'redux';\nimport userReducer from './user';\nimport walletReducer from './wallet';\n\nconst rootReducer = combineReducers({ user: userReducer, wallet: walletReducer });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { loginAction } from '../actions';\nimport './Login.css';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      password: '',\n      isEmailValid: false,\n      isPasswordValid: false,\n    };\n  }\n\n  checkEmailAndPassword = () => {\n    const { email, password } = this.state;\n\n    const minimumLength = 6;\n    const emailRegEx = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n\n    this.setState({ isEmailValid: emailRegEx.test(email) });\n    this.setState({ isPasswordValid: password.length >= minimumLength });\n  }\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n    this.setState({ [name]: value }, () => this.checkEmailAndPassword());\n  }\n\n  submit = () => {\n    const { login, history } = this.props;\n    const { email } = this.state;\n\n    login(email);\n    history.push('/carteira');\n  }\n\n  render() {\n    const { isEmailValid, isPasswordValid } = this.state;\n    const ifEmailOrPasswordInvalid = (!isEmailValid || !isPasswordValid);\n\n    return (\n      <main className=\"login\">\n        <form className=\"login-form border-orange\">\n          <h1>MyOwn Wallet</h1>\n\n          <label htmlFor=\"input-email\">\n            Email:\n            <input\n              type=\"email\"\n              name=\"email\"\n              id=\"input-email\"\n              onChange={ this.handleChange }\n              data-testid=\"email-input\"\n            />\n          </label>\n\n          <label htmlFor=\"input-password\">\n            Senha:\n            <input\n              type=\"password\"\n              name=\"password\"\n              id=\"input-password\"\n              onChange={ this.handleChange }\n              data-testid=\"password-input\"\n            />\n          </label>\n\n          <button\n            type=\"button\"\n            disabled={ ifEmailOrPasswordInvalid }\n            onClick={ this.submit }\n          >\n            Entrar\n          </button>\n        </form>\n      </main>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  login: (email) => dispatch(loginAction(email)) });\n\nLogin.propTypes = {\n  history: PropTypes.objectOf(PropTypes.any).isRequired,\n  login: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { editExpense, fetchCurrencies, getCurrencyAddExpense } from '../actions';\nimport './ExpenseForm.css';\n\nclass ExpenseForm extends Component {\n  constructor() {\n    super();\n    this.state = {\n      id: 0,\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n      exchangeRates: {},\n    };\n  }\n\n  componentDidMount() {\n    const { setCurrencies } = this.props;\n    setCurrencies();\n  }\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  }\n\n  addExpense = () => {\n    const { addExpense } = this.props;\n\n    addExpense(this.state);\n    this.setState((prevState) => ({ id: prevState.id + 1, value: '', description: '' }));\n  }\n\n  render() {\n    const { currencies, editIsActive, edit } = this.props;\n    const { value, description } = this.state;\n    const buttonValue = editIsActive ? 'Editar despesa' : 'Adicionar despesa';\n\n    return (\n      <form className=\"expense-form\">\n        <div className=\"expense\">\n          <label htmlFor=\"value-input\">\n            Valor da despesa:\n            <input\n              type=\"text\"\n              name=\"value\"\n              id=\"value-input\"\n              onChange={ this.handleChange }\n              value={ value }\n              data-testid=\"value-input\"\n            />\n          </label>\n\n          <label htmlFor=\"description-input\">\n            Descrição:\n            <input\n              type=\"text\"\n              name=\"description\"\n              id=\"description-input\"\n              onChange={ this.handleChange }\n              value={ description }\n              data-testid=\"description-input\"\n            />\n          </label>\n        </div>\n\n        <div className=\"details\">\n          <label htmlFor=\"currency-input\">\n            Moeda:\n            <select\n              name=\"currency\"\n              id=\"currency-input\"\n              onChange={ this.handleChange }\n              data-testid=\"currency-input\"\n            >\n              {currencies.map((currency, index) => (\n                <option\n                  value={ currency }\n                  key={ index }\n                  data-testid={ currency }\n                >\n                  {currency}\n                </option>\n              ))}\n            </select>\n          </label>\n\n          <label htmlFor=\"method-input\">\n            Método de pagamento:\n            <select\n              name=\"method\"\n              id=\"method-input\"\n              onChange={ this.handleChange }\n              data-testid=\"method-input\"\n            >\n              <option value=\"Dinheiro\">Dinheiro</option>\n              <option value=\"Cartão de crédito\">Cartão de crédito</option>\n              <option value=\"Cartão de débito\">Cartão de débito</option>\n            </select>\n          </label>\n\n          <label htmlFor=\"tag-input\">\n            Tipo de despesa:\n            <select\n              name=\"tag\"\n              id=\"tag-input\"\n              onChange={ this.handleChange }\n              data-testid=\"tag-input\"\n            >\n              <option value=\"Alimentação\">Alimentação</option>\n              <option value=\"Lazer\">Lazer</option>\n              <option value=\"Trabalho\">Trabalho</option>\n              <option value=\"Saúde\">Saúde</option>\n              <option value=\"Transporte\">Transporte</option>\n            </select>\n          </label>\n\n          <button\n            type=\"button\"\n            onClick={ editIsActive ? () => edit(this.state) : this.addExpense }\n          >\n            {buttonValue}\n          </button>\n        </div>\n      </form>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  setCurrencies: () => dispatch(fetchCurrencies()),\n  addExpense: (expense) => dispatch(getCurrencyAddExpense(expense)),\n  edit: (newExpense) => dispatch(editExpense(newExpense)),\n});\n\nconst mapStateToProps = (state) => ({\n  currencies: state.wallet.currencies,\n  editIsActive: state.wallet.editIsActive,\n  indexToEdit: state.wallet.indexToEdit,\n});\n\nExpenseForm.propTypes = {\n  setCurrencies: PropTypes.func.isRequired,\n  addExpense: PropTypes.func.isRequired,\n  currencies: PropTypes.arrayOf(PropTypes.string).isRequired,\n  editIsActive: PropTypes.bool,\n  edit: PropTypes.func.isRequired,\n};\n\nExpenseForm.defaultProps = {\n  editIsActive: false,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExpenseForm);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { enableExpenseEditing, removeExpense } from '../actions';\nimport './ExpenseTable.css';\n\nclass ExpenseTable extends Component {\n  render() {\n    const { expenses, delExpense, enableEdit } = this.props;\n    const roundNumber = (value) => Number(value).toFixed(2);\n\n    const getIndexOfExpense = (expenseId) => {\n      const target = (expenses.find((expenseWith) => expenseWith.id === expenseId));\n      return ({ id: expenses.indexOf(target), exchange: target.exchangeRates });\n    };\n\n    return (\n      <table>\n        <thead>\n          <tr>\n            <th>Descrição</th>\n            <th>Tag</th>\n            <th>Método de pagamento</th>\n            <th>Valor</th>\n            <th>Moeda</th>\n            <th>Câmbio utilizado</th>\n            <th>Valor convertido</th>\n            <th>Moeda de conversão</th>\n            <th>Editar/Excluir</th>\n          </tr>\n        </thead>\n\n        <tbody>\n\n          {expenses.map((expense) => {\n            const { currency, value, id } = expense;\n            const expenseValue = expense.exchangeRates[currency].ask * value;\n            const currencyName = expense.exchangeRates[currency].name;\n            const exchangeValue = expense.exchangeRates[currency].ask;\n\n            return (\n              <tr key={ id }>\n                <td>{expense.description}</td>\n                <td>{expense.tag}</td>\n                <td>{expense.method}</td>\n                <td>{expense.value}</td>\n                <td>{currencyName}</td>\n                <td>{roundNumber(exchangeValue)}</td>\n                <td>{roundNumber(expenseValue)}</td>\n                <td>Real</td>\n                <td>\n                  <button\n                    type=\"button\"\n                    data-testid=\"edit-btn\"\n                    name={ id }\n                    onClick={ () => enableEdit(getIndexOfExpense(id)) }\n                    className=\"table-button\"\n                  >\n                    Editar\n                  </button>\n\n                  <button\n                    type=\"button\"\n                    onClick={ () => delExpense(id) }\n                    data-testid=\"delete-btn\"\n                    className=\"table-button\"\n                  >\n                    Delete\n                  </button>\n                </td>\n              </tr>);\n          })}\n\n        </tbody>\n      </table>\n    );\n  }\n}\n\nExpenseTable.propTypes = {\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n  delExpense: PropTypes.func.isRequired,\n  enableEdit: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  delExpense: (expenseId) => dispatch(removeExpense(expenseId)),\n  enableEdit: (expenseId) => dispatch(enableExpenseEditing(expenseId)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExpenseTable);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport './Header.css';\n\nclass Header extends React.Component {\n  render() {\n    const { email, expenses } = this.props;\n\n    const expenseTotal = expenses.map((expense) => {\n      const { currency, value } = expense;\n      const expenseValue = expense.exchangeRates[currency].ask * value;\n      return Number(expenseValue);\n    }).reduce((acc, curr) => acc + curr, 0);\n\n    return (\n      <header>\n        <h1>MyOwn Wallet</h1>\n\n        <div className=\"header-expense\">\n          <span data-testid=\"email-field\" className=\"email\">{email}</span>\n\n          <span data-testid=\"total-field\" className=\"total\">\n            {expenseTotal.toFixed(2)}\n          </span>\n\n          <span data-testid=\"header-currency-field\" className=\"currency\">BRL</span>\n        </div>\n      </header>\n    );\n  }\n}\n\nHeader.propTypes = {\n  email: PropTypes.string.isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  email: state.user.email,\n  expenses: state.wallet.expenses,\n});\n\nexport default connect(mapStateToProps)(Header);\n","import React from 'react';\nimport ExpenseForm from '../components/ExpenseForm';\nimport ExpenseTable from '../components/ExpenseTable';\nimport Header from '../components/Header';\nimport './Wallet.css';\n\nclass Wallet extends React.Component {\n  render() {\n    return (\n      <main>\n        <div className=\"wallet border-orange\">\n          <Header />\n          <ExpenseForm />\n          <ExpenseTable />\n        </div>\n\n      </main>\n    );\n  }\n}\n\nexport default Wallet;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={ Login } />\n      <Route exact path=\"/carteira\" component={ Wallet } />\n    </Switch>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={ store }>\n      <BrowserRouter basename={ process.env.PUBLIC_URL }>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}